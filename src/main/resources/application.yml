api.key.encrypt: ${PDV_ENCRYPT_API_KEY:}
api.key.decrypt: ${PDV_DECRYPT_API_KEY:}

retrieve-enroll.schedule: ${SCHEDULE_RETRIEVE_INITIATIVE:0 0 */4 ? * *}

logging:
  level:
    it:
      gov:
        pagopa: ${LOG_LEVEL_PAGOPA:DEBUG}
    org:
      springframework:
        boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
        cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
        data: ${LOG_LEVEL_SPRING_DATA:INFO}
    root: ${LOG_LEVEL_ROOT:INFO}

wallet:
  uri: ${WALLET_URI:}

rest-client:
  reward:
    baseUrl: ${IDPAY_REWARD_URL:http://idpay-reward-calculator}
  pm:
    serviceCode: ${PM_SERVICE_NAME:idpay-service-pm}
    baseUrl: ${PM_SERVICE_BASE_URL:}
    apim-key: ${PM_SERVICE_APIM_KEY:}
    apim-trace: ${PM_SERVICE_APIM_TRACE:true}
  wallet:
    serviceCode: idpay-wallet
  encryptpdv:
    base-url: ${PDV_ENCRYPT_BASE_URL:}
    cf: ${PDV_ENCRYPT_SERVICE_CODE:pdv-ms-tokenizer-encrypt}
  decrypt:
    baseUrl: ${PDV_DECRYPT_BASE_URL:}
    cf: ${PDV_DECRYPT_SERVICE_CODE:pdv-ms-tokenizer}

management.endpoints:
  web:
    exposure.include: info, health

mongo:
  request-rate-too-large:
    api:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_API_ENABLED:false}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_RETRY:0}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_MILLIS_ELAPSED:200}
    batch:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_ENABLED:true}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_RETRY:5}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_MILLIS_ELAPSED:0}

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  cloud:
    function:
      definition: paymentInstrumentQueue;consumerRtd;ackConsumer;consumerCommands
    stream:
      binders:
        kafka-re:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
                      configuration:
                        key:
                          serializer: org.apache.kafka.common.serialization.StringSerializer
                        sasl:
                          jaas:
                            config: ${KAFKA_RULE_ENGINE_SASL_JAAS_CONFIG:}

        kafka-re-ack:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_RE_ACK_SASL_JAAS_CONFIG:}

        kafka-rtd:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_RTD:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_RTD_OUT_SASL_JAAS_CONFIG:}

        kafka-delete-rtd:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_RTD:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_RTD_IN_SASL_JAAS_CONFIG:}

        kafka-errors:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_ERRORS:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_ERRORS_SASL_JAAS_CONFIG:}
        kafka-commands:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST_01:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_COMMANDS_IN_SASL_JAAS_CONFIG:}
      bindings:
        consumerRtd-in-0:
          binder: kafka-delete-rtd
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RTD_IN:}
          group: ${KAFKA_RTD_IN_GROUP:}
        ackConsumer-in-0:
          binder: kafka-re-ack
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RE_ACK:}
          group: ${KAFKA_RE_ACK_GROUP_IN:}
        paymentInstrumentQueue-out-0:
          binder: kafka-re
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RULE_ENGINE:}
        paymentInstrumentQueue-out-1:
          binder: kafka-rtd
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RTD_OUT:}
        paymentInstrumentQueue-out-2:
          binder: kafka-errors
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_ERRORS:}
        consumerCommands-in-0:
          binder: kafka-commands
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_COMMANDS:idpay-commands}
          group: ${KAFKA_COMMANDS_GROUP_IN:idpay-commands-paymentInstrument-consumer-group}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:30000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            metadata.max.age.ms: ${KAFKA_CONFIG_METADATA_MAX_AGE:180000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
            max.request.size: ${KAFKA_CONFIG_MAX_REQUEST_SIZE:1000000}
        bindings:
          consumerRtd-in-0:
            consumer:
              startOffset: ${KAFKA_RTD_DELETE_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: ${KAFKA_RTD_DELETE_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              standardHeaders: ${KAFKA_RTD_DELETE_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_RTD_DELETE_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_RTD_DELETE_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_RTD_DELETE_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_RTD_DELETE_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_RTD_DELETE_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          ackConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_RE_ACK_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: ${KAFKA_RE_ACK_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              standardHeaders: ${KAFKA_RE_ACK_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_RE_ACK_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_RE_ACK_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_RE_ACK_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_RE_ACK_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_RE_ACK_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          paymentInstrumentQueue-out-0:
            producer:
              configuration:
                connections.max.idle.ms: ${KAFKA_RE_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_RE_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_RE_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_RE_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_RE_METADATA_MAX_IDLE_MS:${KAFKA_METADATA_MAX_IDLE_MS:180000}}
          paymentInstrumentQueue-out-1:
            producer:
              configuration:
                connections.max.idle.ms: ${KAFKA_RTD_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_RTD_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_RTD_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_RTD_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_RTD_METADATA_MAX_IDLE_MS:${KAFKA_METADATA_MAX_IDLE_MS:180000}}
          paymentInstrumentQueue-out-2:
            producer:
              configuration:
                connections.max.idle.ms: ${KAFKA_ERRORS_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_ERRORS_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_ERRORS_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_ERRORS_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_ERRORS_METADATA_MAX_IDLE_MS:${KAFKA_METADATA_MAX_IDLE_MS:180000}}
          consumerCommands-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_COMMANDS_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                max.poll:
                  interval.ms: ${KAFKA_COMMANDS_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_COMMANDS_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_COMMANDS_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_COMMANDS_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
  config:
    activate:
      on-profile: default
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

app:
  delete:
    paginationSize: ${DELETE_PAGINATION_SIZE:100}
    delayTime: ${DELETE_DELAY_TIME:1000}

crypto:
  aes:
    cipherInstance: ${CRYPTO_AES_CIPHER_INSTANCE:AES/CBC/PKCS5Padding}
    mode.gcm.iv: ${CRYPTO_AES_MODE_GCM_IV:0}
  azure:
    key-vault:
      url: ${AZURE_KEYVAULT_URL:https://cstar-d-idpay-kv.vault.azure.net/}
      key-names:
        data-block: ${AZURE_KEYVAULT_KEYNAMES_DATABLOCK:}
        secret-key: ${AZURE_KEYVAULT_KEYNAMES_SECRETKEY:}
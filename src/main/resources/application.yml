rest-client:
  pm:
    serviceCode: ${PM_SERVICE_NAME:idpay-service-pm}
    baseUrl: ${PM_SERVICE_BASE_URL}
    url: ${PM_SERVICE_URL}
    apim-key: ${PM_SERVICE_APIM_KEY}
    apim-trace: ${PM_SERVICE_APIM_TRACE:true}
logging:
  level:
    it:
      gov:
        pagopa: ${LOG_LEVEL_PAGOPA:DEBUG}
    org:
      springframework:
        boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
        cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
        data: ${LOG_LEVEL_SPRING_DATA:INFO}
    root: ${LOG_LEVEL_ROOT:INFO}
spring:
  application:
    name: idpay-payment-instrument
  cloud:
    stream:
      binders:
        kafka-re:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST:}
                      configuration:
                        key:
                          serializer: org.apache.kafka.common.serialization.StringSerializer
                        sasl:
                          jaas:
                            config: ${KAFKA_RULE_ENGINE_SASL_JAAS_CONFIG:}

        kafka-rtd:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_RTD:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_RTD_SASL_JAAS_CONFIG:}

        kafka-errors:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_ERRORS:}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_ERRORS_SASL_JAAS_CONFIG:}
      bindings:
        paymentInstrumentQueue-out-0:
          binder: kafka-re
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RULE_ENGINE:}
        paymentInstrumentQueue-out-1:
          binder: kafka-rtd
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_RTD:}
        paymentInstrumentQueue-out-2:
          binder: kafka-errors
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_ERRORS:}
      function:
        definition: paymentInstrumentQueue
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat:
              interval:
                ms: 30000
            sasl:
              mechanism: ${KAFKA_PAYMENT_INSTRUMENT_MECHANISM:}
            security:
              protocol: ${KAFKA_PAYMENT_INSTRUMENT_SECURITY_PROTOCOL:}
            session:
              timeout:
                ms: 60000
          consumerProperties:
            connections:
              max:
                idle:
                  ms: 300000
            key:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer
            socket:
              connection:
                setup:
                  timeout:
                    max:
                      ms: 200000
                    ms: 100000
            value:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer
  config:
    activate:
      on-profile: default
  data:
    mongodb:
      database: ${MONGODB_DBNAME}
      uri: ${MONGODB_URI}
